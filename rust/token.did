type OpRecord = record {
  op : Operation;
  to : principal;
  fee : nat64;
  from : principal;
  timestamp : nat64;
  caller : principal;
  index : nat64;
  amount : nat64;
};
type Operation = variant { Approve; Burn; Init; Mint; Transfer };
type Result = variant { Ok : nat64; Err : TxError };
type TxError = variant {
  Overflow;
  InsufficientAllowance;
  InsufficientBalance;
  Unauthorized;
};
service : (text, text, text, nat8, nat64, principal, bool, bool) -> {
  allTransactions : () -> (vec OpRecord) query;
  allowance : (principal, principal) -> (nat64) query;
  approve : (principal, nat64) -> (Result);
  balanceOf : (principal) -> (nat64) query;
  burn : (principal, nat64) -> (Result);
  decimals : () -> (nat8) query;
  getTransaction : (nat64) -> (OpRecord) query;
  getTransactions : (nat64, nat64) -> (vec OpRecord) query;
  getTxsByAccount : (principal) -> (vec OpRecord) query;
  mint : (principal, nat64) -> (Result);
  name : () -> (text) query;
  owner : () -> (principal) query;
  symbol : () -> (text) query;
  totalSupply : () -> (nat64) query;
  transfer : (principal, nat64) -> (Result);
  transferFrom : (principal, principal, nat64) -> (Result);
}